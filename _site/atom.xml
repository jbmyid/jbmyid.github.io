<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>jbmyid</title>
 <link href="http://www.jbmyid.in/atom.xml" rel="self"/>
 <link href="http://www.jbmyid.in/"/>
 <updated>2014-04-04T19:31:14+05:30</updated>
 <id>http://www.jbmyid.in</id>
 <author>
   <name>Jalendra Bhanarkar</name>
   <email></email>
 </author>

 
 <entry>
   <title>Quick Rails Deployment with Capistrano</title>
   <link href="http://www.jbmyid.in/blog/rails-4-capistrano"/>
   <updated>2014-04-04T00:00:00+05:30</updated>
   <id>http://www.jbmyid.in/blog/rails-4-capistrano</id>
   <content type="html">&lt;h1 id=&quot;deploying-rails-4-app-with-capistrano&quot;&gt;Deploying Rails 4 App with Capistrano&lt;/h1&gt;

&lt;p&gt;Assuming we have a rails app as my_blog
add following in your Gemfile&lt;/p&gt;

&lt;pre&gt;
group :development do
  gem &#39;capistrano&#39;
end
&lt;/pre&gt;
&lt;p&gt;now bundle install&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Capify: make sure there’s no “Capfile” or “capfile” present&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates the following files:&lt;/p&gt;
&lt;pre&gt;
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
&lt;/pre&gt;
&lt;p&gt;Open deploy.rb and set&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
set :application, &#39;application-name&#39;
set :repo_url, &#39;git@github.com:abc/xyz.git&#39; # your git repo
set :deploy_to, &#39;/var/www/my_blog&#39; # where you have to keep your application on server

set :linked_files, %w{config/database.yml config/any_config.yml tmp/restart.txt}
set :linked_dirs, %w{log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

set :default_env, { path: &quot;/usr/local/bin:$PATH&quot; }

namespace :deploy do

  desc &#39;Restart application&#39;
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # Your restart mechanism here, for example:
      execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)
    end
  end

  after :publishing, :restart

  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #   execute :rake, &#39;cache:clear&#39;
      # end
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now setup stage for deploy
eg. staging.rb #in config/deploy/staging.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
role :app, %w{deploy@ip-addressORserver-address}
role :web, %w{deploy@ip-addressORserver-address}

server &#39;ip-addressORserver-address&#39;, user: &#39;deploy&#39;, roles: %w{web app}

set :branch, &#39;staging&#39; # staging branch of git repo(You can set whatever you want)

# in my case i had to set port no for ssh you can omit if you are using default ssh port no.
set :ssh_options, {
    port: 900
 }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now you can deploy your app with.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap staging deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wait.. its not yet done you will have to add som task for each deployment you have to do like migration, asset precompile etc.&lt;/p&gt;

&lt;p&gt;For that we have capistrano-rails
add &lt;code&gt;gem &#39;capistrano-rails&#39;&lt;/code&gt; inside development group of Gemfile
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
group :development do
  gem &#39;capistrano&#39;
  gem &#39;capistrano-rails
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;add following line in &lt;code&gt;Capfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
require &#39;capistrano/rails&#39;
&lt;/pre&gt;
&lt;p&gt;It will run basic task required while rails application deployment like &lt;code&gt;rake db:migrate&lt;/code&gt; and &lt;code&gt;rake assets:precompile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yeh you are done with basic setup of deplyment.&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Generate PDF(e-ticket) from html in Rails</title>
   <link href="http://www.jbmyid.in/blog/html-to-pdf"/>
   <updated>2014-04-04T00:00:00+05:30</updated>
   <id>http://www.jbmyid.in/blog/html-to-pdf</id>
   <content type="html">&lt;h1 id=&quot;pdfe-ticket-from-html-in-rails&quot;&gt;PDF(e-ticket) from html in Rails&lt;/h1&gt;

&lt;p&gt;Following are the steps for creating pdf from html views.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “pdfkit” in gemfile&lt;/li&gt;
  &lt;li&gt;Download following 2 files
    &lt;ul&gt;
      &lt;li&gt;wkhtmltopdf-amd64 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-amd64.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;wkhtmltopdf-i386 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-i386.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create “bin” folder in your rails application folder and extract above files in this “bin” folder. These are the binaries which are needed for creating  pdf from html views.&lt;/li&gt;
  &lt;li&gt;Create “pdfkit.rb” in “config/initializers” folder of the application. And add following code&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  #pdfkit.rb
  PDFKit.configure do |config|
    if [&quot;development&quot;].include?(Rails.env)
      #only if your are working on 32bit machine
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-i386&#39;).to_s
    else
      #if your site is hosted on heroku or any other hosting server which is 64bit
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-amd64&#39;).to_s
    end
    config.default_options = {
      :encoding=&amp;gt;&quot;UTF-8&quot;,
      :page_size=&amp;gt;&quot;A4&quot;,
      :margin_top=&amp;gt;&quot;0.25in&quot;,
      :margin_right=&amp;gt;&quot;0.1in&quot;,
      :margin_bottom=&amp;gt;&quot;0.25in&quot;,
      :margin_left=&amp;gt;&quot;0.1in&quot;,
      :disable_smart_shrinking=&amp;gt; false
    }
  end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Create a file e_ticket.rb in models folder as following&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    # e-ticket
    class ETicket &amp;lt; AbstractController::Base
      include AbstractController::Rendering
      include AbstractController::Helpers
      include AbstractController::Translation
      include AbstractController::AssetPaths
      include Rails.application.routes.url_helpers
      helper ApplicationHelper
      self.view_paths = &quot;app/views&quot;
      attr_reader :html
      def initialize(order)
        @order = order
        @html = render_to_string(partial: &quot;shared/e_ticket&quot;, :layout =&amp;gt; false,
             :disposition =&amp;gt; &#39;inline&#39;)
      end
      def pdf
        kit = PDFKit.new(@html)
        kit.stylesheets &amp;lt;&amp;lt; &quot;#{Rails.root}/app/assets/stylesheets/pdf.css&quot;
        kit.to_pdf
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In above code, we have added style sheet “pdf.css” in which we have to write the pdf related css rules. Keep this file as separate for pdf only .
Now you have your e-ticket ready to download and attach to any mail. You have to just create e-ticket by&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    eticket = ETicket.new(order)
    pdf = eticket.pdf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Yehhhhhh……………..its ready to download and attach.&lt;/p&gt;

&lt;p&gt;Now I am writing brief for downloading and attaching the pdf to mail.&lt;/p&gt;

&lt;h3 id=&quot;how-to-download-eticket-pdf&quot;&gt;How to download eticket pdf.&lt;/h3&gt;
&lt;p&gt;In your orders controller you can create an separate action for downloading or you can do this in your orders show action in pdf response. Any way I am creating separate action for downloading order’s e-ticket pdf.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrdersController &amp;lt; ApplicationController
      def download
        @order = Order.find(params[:id])
        eticket = ETicket.new(@order)
        send_data(eticket.pdf, :filename =&amp;gt; &quot;e-Ticket #{@order.number}&quot;,
           :type =&amp;gt; &#39;application/pdf&#39;)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;sending-e-ticket-as-attachment-in-mail&quot;&gt;Sending e-ticket as attachment in mail&lt;/h3&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrderMailer &amp;lt; ActionMailer::Base
      def send_e_ticket(order)
        @order = order
        subject = &quot; E-Ticket&quot;
        eticket = ETicket.new(@order)
        attachments[&quot;E-Ticket #{@order.number}.pdf&quot;] = eticket.pdf
        mail(:to =&amp;gt;”abc@gmail.com”, :subject =&amp;gt;”E-ticket”)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now send an mail using following code&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    OrderMailer.send_e_ticket(order).deliver
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;yippeeeeee…..Mail sent with attached e-ticket pdf.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h1&gt;
</content>
 </entry>
 

</feed>
