<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>jbmyid</title>
 <link href="http://blog.jbmyid.in/atom.xml" rel="self"/>
 <link href="http://blog.jbmyid.in/"/>
 <updated>2014-09-25T14:29:06+05:30</updated>
 <id>http://blog.jbmyid.in</id>
 <author>
   <name>Jalendra Bhanarkar</name>
   <email></email>
 </author>

 
 <entry>
   <title>Paypal Subscription Plan</title>
   <link href="http://blog.jbmyid.in/blog/paypal-billing-plan-and-subscriptions-rails"/>
   <updated>2014-09-25T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/paypal-billing-plan-and-subscriptions-rails</id>
   <content type="html">&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Create paypal account in developer section of &lt;a href=&quot;href=https://developer.paypal.com/&quot;&gt;paypal&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Login and go to dashboard and then to my apps section.&lt;/li&gt;
  &lt;li&gt;Create new app&lt;/li&gt;
  &lt;li&gt;After app creation you will get api credentials for production and sandbox.&lt;/li&gt;
  &lt;li&gt;Copy &lt;code&gt;client_id&lt;/code&gt; and &lt;code&gt;client_secret&lt;/code&gt; and keep in secret which will be needing in next step.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;setup-gem&quot;&gt;Setup Gem&lt;/h1&gt;

&lt;p&gt;How to setup application to use paypal-sdk-rest gem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “paypal-sdk-rest” in gemfile
    &lt;ul&gt;
      &lt;li&gt;
        &lt;pre&gt;gem &quot;paypal-sdk-rest&quot;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;rails g paypal:sdk:install&lt;/code&gt;.
It will generate two files in config folder
    &lt;ol&gt;
      &lt;li&gt;config/paypal.yml&lt;/li&gt;
      &lt;li&gt;config/initializers/paypal.rb&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Paste the credenetials which where obtained from application creation in paypal in &lt;code&gt;config/paypal.yml&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;paypal-sdk-rest&lt;/code&gt; gem currently does not include billing plan api which can be added manually.
Create &lt;code&gt;paypal_ext.rb&lt;/code&gt; and copy following code and place in &lt;code&gt;config/initializers&lt;/code&gt; folder.&lt;/p&gt;

&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  module PayPal::SDK
    module REST
      module DataTypes
        Payer.class_eval do
          object_of :merchant_id, String
        end

        class ChargeModel &amp;lt; Base
          object_of :id, String
          object_of :type, String
          object_of :amount, Currency
        end

        class PaymentDefination &amp;lt; Base
          object_of :name, String
          object_of :type, String #UNLIMITED or FIXED
          object_of :frequency_interval, String
          object_of :frequency, String # DAY, WEEK, MONTH or YEAR.
          object_of :cycles, Integer
          object_of :amount, Currency
          object_of :id, String
          array_of :charge_models, ChargeModel
        end

        class MerchantPreference &amp;lt; Base
          object_of :id, String
          object_of :cancel_url, String
          object_of :return_url, String
          object_of :setup_fee, Currency
          object_of :max_fail_attempts, Integer
          object_of :auto_bill_amount, Currency
          object_of :initial_fail_amount_action, Currency
          object_of :create_time, DateTime
          object_of :update_time, DateTime
        end

        class BillingPlan &amp;lt; Base
          # {
          # name: &quot;Plan Name&quot;, type: &quot;INFINITE&quot;, description: &quot;Any description&quot;,
          # payment_definitions: {name: &quot;Name&quot;, type: &quot;REGULAR&quot;, frequency_interval: 1, amount: {value: 2.3, currency: &quot;USD&quot;}, frequency: &quot;MONTH&quot;},
          # merchant_preferences: {cancel_url: &quot;http://google.com&quot;, return_url: &quot;http://google.com&quot;, setup_fee: {value: 0, currency: &quot;USD&quot;}}
          # }
          object_of :id, String
          object_of :name, String
          object_of :description, String
          object_of :type, String
          array_of :payment_definitions, DataTypes::PaymentDefination
          object_of :merchant_preferences, MerchantPreference
          object_of :state, String
          array_of  :links, DataTypes::Links
          object_of :payee, DataTypes::Payer
          object_of :create_time, DateTime
          object_of :update_time, DateTime


          def self.load_members
            object_of :name, String
            object_of :description, String
          end

          include RequestDataType
          def create
            path = &quot;v1/payments/billing-plans&quot;
            response = api.post(path, self.to_hash)
            self.merge!(response)
            success?
          end

          def self.find(resource_id)
            raise ArgumentError.new(&quot;id required&quot;) if resource_id.to_s.strip.empty?
            path = &quot;v1/payments/billing-plans/#{resource_id}&quot;
            self.new(api.get(path))
          end

          def update(attrs)
            path = &quot;v1/payments/billing-plans/#{self.id}&quot;
            attrs = attrs.blank? ? [{path: &quot;/&quot;, value: {state: &quot;ACTIVE&quot;}, op: &quot;replace&quot;}] : attrs
            response = api.patch(path, attrs)
            self.merge!(response)
            success?
          end

          def activate!
            update([{path: &quot;/&quot;, value: {state: &quot;ACTIVE&quot;}, op: &quot;replace&quot;}])
          end

        end

        class AgreementDetails &amp;lt; Base
          object_of :outstanding_balance, Currency
          object_of :cycles_remaining, Integer
          object_of :cycles_completed, Integer
          object_of :final_payment_date, DateTime
          object_of :failed_payment_count, Integer
        end

        class AgreeMent &amp;lt; Base
          object_of :id, String
          object_of :name, String
          object_of :description, String
          object_of :start_date, DateTime
          object_of :payer, Payer
          object_of :plan, BillingPlan
          array_of :links, DataTypes::Links
          object_of :override_merchant_preferences, MerchantPreference
          object_of :state, String
          object_of :agreement_details, AgreementDetails

          include RequestDataType

          def create
            path = &quot;v1/payments/billing-agreements&quot;
            response = api.post(path, self.to_hash)
            self.merge!(response)
            success?
          end

          def approval_url
            links.select{|link| link.rel==&quot;approval_url&quot;}[0].try :href
          end

          def execute_url
            links.select{|link| link.rel==&quot;execute&quot;}[0].try :href
          end

          def execute!(token)
            response = api.post(&quot;v1/payments/billing-agreements/#{token}/agreement-execute&quot;)
            self.merge!(response)
            success?
          end

          def suspend
            path = &quot;v1/payments/billing-agreements/#{id}/suspend&quot;
            response = api.post(path, {note: &quot;Suspending the subscription&quot;})
            self.merge!(response)
            success?
          end

          def reactivate
            path = &quot;v1/payments/billing-agreements/#{id}/re-activate&quot;
            response = api.post(path, {note: &quot;Reactivating the agreement.&quot;})
            self.merge!(response)
            success?
          end

          def cancel
            path = &quot;v1/payments/billing-agreements/#{id}/cancel&quot;
            response = api.post(path, {note: &quot;Cencelling the agreement.&quot;})
            self.merge!(response)
            success?
          end

          def self.find(resource_id)
            raise ArgumentError.new(&quot;id required&quot;) if resource_id.to_s.strip.empty?
            path = &quot;v1/payments/billing-agreements/#{resource_id}&quot;
            self.new(api.get(path))
          end

        end


      end
    end
  end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now you can create billing plans using rest api.&lt;/p&gt;

&lt;h1 id=&quot;creating-billing-plans&quot;&gt;Creating Billing Plans&lt;/h1&gt;

&lt;p&gt;Create &lt;code&gt;BillingPlan&lt;/code&gt; model and add fields required along with paypal_id.
Create &lt;code&gt;ActAsPaypalPlan&lt;/code&gt; concern in &lt;code&gt;models/concernes&lt;/code&gt; folder and paste following code.&lt;/p&gt;
&lt;pre&gt;
  &lt;code&gt;
    module ActAsPaypalPlan
      extend ActiveSupport::Concern
      include PayPal::SDK::REST::DataTypes

      included do
        after_validation :set_paypal_plan, on: :create
      end

      def paypal_plan
        if paypal_id
          @paypal_plan ||= BillingPlan.find(paypal_id)
        else
          @paypal_plan ||= BillingPlan.new(name: name, type: &quot;INFINITE&quot;, description: description,
            payment_definitions: {name: &quot;PaymentDefinition#{name}&quot;, type: &quot;REGULAR&quot;, frequency_interval: 1, amount: {value: price, currency: &quot;USD&quot;}, frequency: interval},
            merchant_preferences: {cancel_url: &quot;plan_cancel_url&quot;, return_url: &quot;return_url&quot;, setup_fee: {value: 0, currency: &quot;USD&quot;}})
        end
      end

      def agreement(options={})
        @agreement ||= AgreeMent.new(name: &quot;Subscribe #{name}&quot;, description: &quot;Subscribe #{name}&quot;, start_date: Date.today+1.days, plan: {id: paypal_plan.id}, payer: {payment_method: &quot;paypal&quot;}, override_merchant_preferences: {cancel_url: options[:cancel_url], return_url: options[:return_url]})
      end

      private
      def set_paypal_plan
        return if errors.any?
        billing_plan = paypal_plan
        if billing_plan.create &amp;amp;&amp;amp; billing_plan.activate!
          self.paypal_id = billing_plan.id
        else
          self.errors[:paypal_id] &amp;lt;&amp;lt; billing_plan.error[:details].collect{|e| e[:issue]}.join(&quot;,&quot;)
        end
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;include ActAsPaypalPlan in BillingPlan model&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;creating-subscription&quot;&gt;Creating Subscription&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Create &lt;code&gt;Subscription&lt;/code&gt; model with required fields and &lt;code&gt;agreement_id&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create &lt;code&gt;act_as_subscription.rb&lt;/code&gt; concern in &lt;code&gt;models/concerns&lt;/code&gt; and paste below code.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
  &lt;code&gt;
    module ActAsSubscription
      STATES = {cancelled: &quot;CANCELLED&quot;, active: &quot;ACTIVE&quot;, suspended: &quot;SUSPENDED&quot;}
      extend ActiveSupport::Concern
      include PayPal::SDK::REST::DataTypes

      included do
        define_callbacks :cancel
        define_callbacks :reactivate
        define_callbacks :suspend
        after_create :active!
      end

      STATES.each do |k,v|
        define_method &quot;#{k}?&quot; do
          self.state == v
        end
        define_method &quot;#{k}!&quot; do
          update_column(:state, v)
        end
      end

      def agreement
        @agreement ||= AgreeMent.find(agreement_id)
      end

      def cancel
        return unless agreement_id
        run_callbacks :cancel do
          update_column(:state, STATES[:cancelled]) if agreement.cancel
        end
      end

      def suspend
        return unless agreement_id
        run_callbacks :suspend do
          update_column(:state, STATES[:suspended]) if agreement.suspend
        end
      end

      def reactivate
        return unless agreement_id
        run_callbacks :reactivate do
          update_column(:state, STATES[:active]) if agreement.reactivate
        end
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;include ActAsSubscription in subscription model.&lt;/li&gt;
  &lt;li&gt;Add following method in user model&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
  &lt;code&gt;
    def create_subscription_with_payment_token!(options)
      agreement = PayPal::SDK::REST::DataTypes::AgreeMent.new
      if agreement.execute!(options[:token])
        subscription = build_subscription(billing_plan_id: options[:billing_plan_id], agreement_id: agreement.id)
        subscription.save
      else
        false
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h1 id=&quot;subscription-controller&quot;&gt;Subscription controller&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;For creating subscripton agreement which wont be successfull unles and untill you execute the agreement from paypal&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
  &lt;code&gt;
    def approve
      @plan = BillingPlan.find_by_id(params[:plan_id])
      if @plan &amp;amp;&amp;amp; @plan.agreement(cancel_url: paypal_cancel_url, return_url: paypal_return_url).create
        session[:plan_id] = @plan.id
        redirect_to @plan.agreement.approval_url
      else
        flash[:alert] = t(&quot;flash.error.subscription_approve_failure&quot;)
        redirect_to new_subscription_path
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;It will redirect to paypal for authorization and approval.&lt;/li&gt;
  &lt;li&gt;After approval paypal will redirect to your return url specified above.&lt;/li&gt;
  &lt;li&gt;For execution of agreement&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
  &lt;code&gt;
    def execute
      if session[:plan_id]
        @subscription = @user.create_subscription_with_payment_token!(token: params[:token], billing_plan_id: session[:plan_id])
        session[:plan_id] = nil
        flash[:notice] = t(&quot;flash.success.subscription.created&quot;)
        redirect_to after_create_path
      else
        redirect_to unauthorized_url
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h1 id=&quot;after-creation-of-subscription&quot;&gt;After creation of subscription&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;You can suspend subscription for sometime and reactivate again.&lt;/li&gt;
  &lt;li&gt;But after cancellation, you can not reactivate, you have to subscribe again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/jbmyid/16c70067ea3f5cea7d2b&quot;&gt;Gist url&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Client Side Validation in Rails</title>
   <link href="http://blog.jbmyid.in/blog/client-side-validation-in-rails"/>
   <updated>2014-08-12T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/client-side-validation-in-rails</id>
   <content type="html">&lt;h1 id=&quot;setup-gem&quot;&gt;Setup Gem&lt;/h1&gt;

&lt;p&gt;How to setup application to use rails_jq_validations gem.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “rails_jq_validations” in gemfile
    &lt;ul&gt;
      &lt;li&gt;
        &lt;pre&gt;gem &quot;rails_jq_validations&quot;, git: &quot;git@github.com:jbmyid/rails_jq_validations.git&quot;&lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;bundle install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add js to your application.js
    &lt;ul&gt;
      &lt;li&gt;
        &lt;pre&gt; //= require rails_jq_validations/form_validator &lt;/pre&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;adding-client-side-validation-to-form&quot;&gt;Adding Client side validation to form&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Considering you are having &lt;code&gt;Product&lt;/code&gt; model and you have added &lt;code&gt;validates :name, presence: true&lt;/code&gt; to your model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add  &lt;code&gt;data: {validate: true}&lt;/code&gt; to your &lt;code&gt;form_for&lt;/code&gt; heleper like following&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  #_form.html.erb
  &amp;lt;%= form_for @product, data: {validate: true} do |f| %&amp;gt;
    &amp;lt;%= f.text_field :name %&amp;gt;

    &amp;lt;%= f.submit %&amp;gt;
  &amp;lt;% end %&amp;gt;
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Will give you output as follow(message which is set in en.yml for your models)&lt;/p&gt;

&lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-08-12-client-side-validation-in-rails/validation.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-08-12-client-side-validation-in-rails/validation.png&quot; alt=&quot;&quot; width=&quot;auto&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;

&lt;p&gt;It uses jquery &lt;a href=&quot;http://jqueryvalidation.org/&quot;&gt;validation plugin&lt;/a&gt;, so you can add any additional specific rule to particular field. Like following.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;%= f.text_field :name, data:{&quot;jq-rules&quot;=&amp;gt; {required: true, number: true, messages: {required: &quot;Please enter name.&quot;}}.to_json}%&amp;gt;
&lt;/pre&gt;

&lt;div class=&quot;message&quot;&gt;Note: styling error messages are upto you. You can set default error message placement with validation plugin.&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Push Notification using AWS SNS on rails</title>
   <link href="http://blog.jbmyid.in/blog/aws-sns-gcm-push-notifications"/>
   <updated>2014-06-27T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/aws-sns-gcm-push-notifications</id>
   <content type="html">&lt;h1 id=&quot;push-notification-using-aws-sns-on-rails&quot;&gt;Push Notification using AWS SNS on rails&lt;/h1&gt;

&lt;p&gt;Prerequisites.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;AWS account&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Note Down the Amazon access_key_id, secret_access_key and region&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an Application in Amazon/SNS Section&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Note Down the Application Platform ARN&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set ENV variables:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;
    &lt;code class=&quot;ruby&quot;&gt;
      ENV[&#39;SNS_APP_ARN&#39;] = the arn obtained from 4th step
      ENV[&#39;AWS_ACCESS_KEY_ID&#39;] = obtained from step 2
      ENV[&#39;AWS_SECRET_ACCESS_KEY&#39;]= obtained from step 2
    &lt;/code&gt;
  &lt;/pre&gt;

&lt;h1 id=&quot;getting-started-with-aws-sdk-gem&quot;&gt;Getting Started with ‘aws-sdk’ gem&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem ‘aws-sdk’&lt;/li&gt;
  &lt;li&gt;bundle install&lt;/li&gt;
  &lt;li&gt;Set configuration for aws
    &lt;ul&gt;
      &lt;li&gt;Create aws_config.rb in config/initializers directory and add following&lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;AWS.config(access_key_id: ENV[&#39;AWS_ACCESS_KEY_ID&#39;], secret_access_key: ENV[&#39;AWS_SECRET_ACCESS_KEY&#39;], region: &quot;region_code&quot;)&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;using-aws-sdk&quot;&gt;Using AWS SDK&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Create an sns object&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
    sns = AWS::SNS.new
  &lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Set sns client&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;client = sns.client&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Whenever device registers on your site get GCM registration id and store it in your database, and every time the gmc registration id changes subscribe it in SNS&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;response = client.create_platform_endpoint token: gcm_registraion_id, platform_application_arn: ENV[&#39;SNS_APP_ARN&#39;]&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;the response will contain the end_point_arn for the device registered, which will be used in sending notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;device_arn = response[:endpoint_arn] # save it&lt;/pre&gt;

&lt;h1 id=&quot;publishing-notification&quot;&gt;Publishing Notification:&lt;/h1&gt;
&lt;pre&gt;
  gcm_message = {collapse_key: &quot;any_collapse_key&quot;, data: {key: &quot;Value&quot;}}
  message = {&quot;GCM&quot;=&amp;gt; gcm_message.to_json}.to_json
&lt;/pre&gt;
&lt;pre&gt;
  response = client.publish target_arn: device_arn, message: message , message_structure: &#39;json&#39;
&lt;/pre&gt;
&lt;div class=&quot;message&quot;&gt;Notification Sent!&lt;/div&gt;

&lt;p&gt;Whenever gcm registration id changes remove the existing target_arn and add new one
To remove the existing target arn&lt;/p&gt;
&lt;pre&gt;
  client.delete_endpoint(endpoint_arn: device_arn)
&lt;/pre&gt;

&lt;p&gt;You can broad cast the notification by creating topics and subscribing the arn to the particular topic and publish specifying topic_arn&lt;/p&gt;

&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre&gt;
  response = client.publish topic_arn: topic_arn, message: message , message_structure: &#39;json&#39;
&lt;/pre&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Setup Twitter Bootstrap on Rails</title>
   <link href="http://blog.jbmyid.in/blog/bootstrap-on-rails"/>
   <updated>2014-04-15T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/bootstrap-on-rails</id>
   <content type="html">&lt;h1 id=&quot;setup-twitter-bootstrap-on-rails&quot;&gt;“Setup Twitter Bootstrap on Rails”&lt;/h1&gt;
&lt;p&gt;Twitter Bootstrap is the most popular front-end framework for developing responsive, mobile first projects on the web. This is the most basic thing needed in rails app if no UI yet finaled yet or to design your responsive web layout.
&lt;br /&gt;
To integrate twitter bootstrap in your rails project you can do any of the following method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using gem ‘twitter-bootstrap-rails’ from &lt;a href=&quot;https://github.com/seyhunak/twitter-bootstrap-rails/tree/bootstrap3&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Or below steps to integrate without gem&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;here-are-the-steps-which-will-be-needed-to-integrate-twitter-bootstrap-in-rails-app&quot;&gt;Here are the steps which will be needed to integrate twitter bootstrap in rails app.&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Download bootstap from &lt;a href=&quot;http://getbootstrap.com/getting-started/#download&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract the zip file and copy assets folder content to &lt;code&gt;yourApp/vendor/assets/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now you will have following folder in &lt;code&gt;vendor/assets/&lt;/code&gt; directory
    &lt;ul&gt;
      &lt;li&gt;fonts&lt;/li&gt;
      &lt;li&gt;stylesheets&lt;/li&gt;
      &lt;li&gt;javascripts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create &lt;code&gt;bootstrap_overrides.css.scss&lt;/code&gt; in &lt;code&gt;yourApp/app/assets/stylesheets/&lt;/code&gt; directory and add following line at the top.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;@import &quot;bootstrap&quot;;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rename your &lt;code&gt;application.css&lt;/code&gt; file to &lt;code&gt;application.css.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;*= require bootstrap_overrides&lt;/code&gt; to your &lt;code&gt;application.css.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add following code to your &lt;code&gt;bootstrap_overrides.css.scss&lt;/code&gt; file
  *
    &lt;pre&gt;
   &lt;code class=&quot;ruby&quot;&gt;
     @font-face {
       font-family: &#39;Glyphicons Halflings&#39;;
       src: url(asset_path(&#39;glyphicons-halflings-regular.eot&#39;));
       src: url(asset_path(&#39;glyphicons-halflings-regular.eot?#iefix&#39;)) format(&#39;embedded-opentype&#39;), url(asset_path(&#39;glyphicons-halflings-regular.woff&#39;)) format(&#39;woff&#39;), url(asset_path(&#39;glyphicons-halflings-regular.ttf&#39;)) format(&#39;truetype&#39;), url(asset_path(&#39;glyphicons-halflings-regular.svg#glyphicons_halflingsregular&#39;)) format(&#39;svg&#39;);
     }
   &lt;/code&gt;
 &lt;/pre&gt;
    &lt;div class=&quot;message&quot;&gt;
   Above code is to fix the glyphicons issue in asset pipelining (in production).
 &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.assets.paths &amp;lt;&amp;lt; &quot;#{Rails}/vendor/assets/fonts&quot;&lt;/code&gt; in your &lt;code&gt;application.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;//= require bootstrap.min&lt;/code&gt; in your application.js if you want to include bootstrap js.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;if-even-after-doing-all-above-steps-the-glyphicons-doesnt-work-then&quot;&gt;If even after doing all above steps the glyphicons doesnt work then&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;move the fonts to &lt;code&gt;yourApp/app/assets/fonts/&lt;/code&gt;. And change fonts path in &lt;code&gt;application.rb&lt;/code&gt;
&lt;br /&gt;i.e.  &lt;code&gt;config.assets.paths &amp;lt;&amp;lt; &quot;#{Rails}/assets/fonts&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;message&quot;&gt;
  You are welcome :P
  &lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Ubuntu 13.10 in dual boot with windows 8.1</title>
   <link href="http://blog.jbmyid.in/blog/installing-ubuntu-on-efi-enabled-laptop"/>
   <updated>2014-04-12T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/installing-ubuntu-on-efi-enabled-laptop</id>
   <content type="html">&lt;h1 id=&quot;installing-ubuntu-1310-in-dual-boot-with-windows-81&quot;&gt;Installing Ubuntu 13.10 in dual boot with windows 8.1&lt;/h1&gt;

&lt;p&gt;Recently I bought Lenovo G510 which have efi feature for boot options. I have struglled a lot to install ubuntu and windows both in dual boot.
After a long strugle I have learned how to install windows 8.1 and ubuntu 13.10 in dual boot.&lt;/p&gt;

&lt;p&gt;Here are steps I followed to work it out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Before installing windows 8.1 make sure you are installing it in EFI mode.
    &lt;ul&gt;
      &lt;li&gt;Go to boot menu and disable Legacy mode and enable EFI mode only&lt;/li&gt;
      &lt;li&gt;Turn of Secure Boot&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After enabling EFI install windows 8.1&lt;/li&gt;
  &lt;li&gt;Now create bootable usb of ubuntu 13.10 
    &lt;ul&gt;
      &lt;li&gt;You can use linux startup disk creator to create bootable usb.&lt;/li&gt;
      &lt;li&gt;Or use universal usb installer for windows.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/Create-a-USB-stick.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/Create-a-USB-stick.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to disk manager, and shrink the partition to free up space to install Ubuntu.
    &lt;ul&gt;
      &lt;li&gt;Shrink about 10 - 20 Gb whichever suits you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From windows TURN OFF fast startup from Power option.&lt;/p&gt;

    &lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/power.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/power.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now plug ubuntu bootable usb and click on &lt;code&gt;restart&lt;/code&gt; holding &lt;code&gt;SHIFT&lt;/code&gt; button.&lt;/li&gt;
  &lt;li&gt;Now blue screen will appear, look for &lt;code&gt;Use Device&lt;/code&gt; option and select and press &lt;code&gt;enter&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It will show &lt;code&gt;EFI USB Device&lt;/code&gt;, select and press &lt;code&gt;enter&lt;/code&gt; &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now the Ubuntu boot screen will appear.
    &lt;ul&gt;
      &lt;li&gt;You can now try Ubuntu without installing or install directly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you see blank screen after selecting any option follow
    &lt;ul&gt;
      &lt;li&gt;Select any of the option from boot screen but dont press enter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&quot;article-img&quot;&amp;gt;&amp;lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/boot.png&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/boot.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&amp;gt;&amp;lt;/blockquote&amp;gt;&amp;lt;/div&amp;gt;


* Press `e` and add `acpi_osi=Linux acpi_backlight=vendor` in boot options before `quiet splash`
* Press F10 to boot
&amp;lt;pre&amp;gt;Note: This step will be required each time you boot.&amp;lt;/pre&amp;gt; 10. If you see a message &quot;System is running low graphics&quot; kind of thing from where you can not prceed further.
* Add `nomodeset` in boot options before `quiet splash`
* And follow 9 th step 11. Now moving to installation of ubuntu 
* Install from try ubuntu or Install unbuntu option
* Select `Something Else` option
* Now when the partition selection screen appear choose free space which was freed from windows of 10/20 GB
* click `+` button and type 2 GB(i.e 2048 MB) and select swap area option from drop down and press create button
* select free space again and click `+` button and select `/` (root) from dropdown and press create. 12. Continue installation 13. Now while booting ubuntu if you encounter blank screen with blinking cursor then enable Legacy Support from boot menu (I had to do it. Without enabling Legacy support i was not able to see ubuntu ui). 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;afer-installation&quot;&gt;Afer installation&lt;/h1&gt;
&lt;p&gt;If you used point 9. or 10. to boot you will need to add it in boot default options. To do so follow these steps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open terminal &lt;/li&gt;
  &lt;li&gt;Type &lt;code&gt;sudo vi /etc/defaults/grub&lt;/code&gt; and press enter&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;acpi_osi=Linux acpi_backlight=vendor&lt;/code&gt; before &lt;code&gt;quiet splash&lt;/code&gt; in &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; option and save the file&lt;/li&gt;
  &lt;li&gt;Type &lt;code&gt;sudo update-grub&lt;/code&gt; in terminal and press enter&lt;/li&gt;
  &lt;li&gt;Now try rebooting you wont need adding these options further while booting.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;Yes we are done&lt;/pre&gt;

&lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/yes.jpeg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/yes.jpeg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Quick Rails Deployment with Capistrano</title>
   <link href="http://blog.jbmyid.in/blog/rails-4-capistrano"/>
   <updated>2014-04-04T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/rails-4-capistrano</id>
   <content type="html">&lt;h1 id=&quot;deploying-rails-4-app-with-capistrano-3&quot;&gt;Deploying Rails 4 App with Capistrano 3&lt;/h1&gt;

&lt;p&gt;Assuming we have a rails app as my_blog
add following in your Gemfile&lt;/p&gt;

&lt;pre&gt;
group :development do
  gem &#39;capistrano&#39;
end
&lt;/pre&gt;
&lt;p&gt;now bundle install&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Capify: make sure there’s no “Capfile” or “capfile” present&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates the following files:&lt;/p&gt;
&lt;pre&gt;
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
&lt;/pre&gt;
&lt;p&gt;Open deploy.rb and set&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
set :application, &#39;application-name&#39;
set :repo_url, &#39;git@github.com:abc/xyz.git&#39; # your git repo
set :deploy_to, &#39;/var/www/my_blog&#39; # where you have to keep your application on server

set :linked_files, %w{config/database.yml config/any_config.yml tmp/restart.txt}
set :linked_dirs, %w{log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

set :default_env, { path: &quot;/usr/local/bin:$PATH&quot; }

namespace :deploy do

  desc &#39;Restart application&#39;
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # Your restart mechanism here, for example:
      execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)
    end
  end

  after :publishing, :restart

  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #   execute :rake, &#39;cache:clear&#39;
      # end
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now setup stage for deploy
eg. staging.rb #in config/deploy/staging.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
role :app, %w{deploy@ip-addressORserver-address}
role :web, %w{deploy@ip-addressORserver-address}

server &#39;ip-addressORserver-address&#39;, user: &#39;deploy&#39;, roles: %w{web app}

set :branch, &#39;staging&#39; # staging branch of git repo(You can set whatever you want)

# in my case i had to set port no for ssh you can omit if you are using default ssh port no.
set :ssh_options, {
    port: 900
 }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now you can deploy your app with.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap staging deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wait.. its not done yet you will have to add some task for each deployment you have to do like migration, asset precompile etc.&lt;/p&gt;

&lt;p&gt;For that we have capistrano-rails
add &lt;code&gt;gem &#39;capistrano-rails&#39;&lt;/code&gt; inside development group of Gemfile
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
group :development do
  gem &#39;capistrano&#39;
  gem &#39;capistrano-rails
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;add following line in &lt;code&gt;Capfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
require &#39;capistrano/rails&#39;
&lt;/pre&gt;
&lt;p&gt;It will run basic task required while rails application deployment like &lt;code&gt;rake db:migrate&lt;/code&gt; and &lt;code&gt;rake assets:precompile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yeh you are done with basic setup of deplyment.&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Generate PDF(e-ticket) from html in Rails</title>
   <link href="http://blog.jbmyid.in/blog/html-to-pdf"/>
   <updated>2014-04-04T00:00:00+05:30</updated>
   <id>http://blog.jbmyid.in/blog/html-to-pdf</id>
   <content type="html">&lt;h1 id=&quot;pdfe-ticket-from-html-in-rails&quot;&gt;PDF(e-ticket) from html in Rails&lt;/h1&gt;

&lt;p&gt;Following are the steps for creating pdf from html views.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “pdfkit” in gemfile&lt;/li&gt;
  &lt;li&gt;Download following 2 files
    &lt;ul&gt;
      &lt;li&gt;wkhtmltopdf-amd64 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-amd64.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;wkhtmltopdf-i386 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-i386.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create “bin” folder in your rails application folder and extract above files in this “bin” folder. These are the binaries which are needed for creating  pdf from html views.&lt;/li&gt;
  &lt;li&gt;Create “pdfkit.rb” in “config/initializers” folder of the application. And add following code&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  #pdfkit.rb
  PDFKit.configure do |config|
    if [&quot;development&quot;].include?(Rails.env)
      #only if your are working on 32bit machine
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-i386&#39;).to_s
    else
      #if your site is hosted on heroku or any other hosting server which is 64bit
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-amd64&#39;).to_s
    end
    config.default_options = {
      :encoding=&amp;gt;&quot;UTF-8&quot;,
      :page_size=&amp;gt;&quot;A4&quot;,
      :margin_top=&amp;gt;&quot;0.25in&quot;,
      :margin_right=&amp;gt;&quot;0.1in&quot;,
      :margin_bottom=&amp;gt;&quot;0.25in&quot;,
      :margin_left=&amp;gt;&quot;0.1in&quot;,
      :disable_smart_shrinking=&amp;gt; false
    }
  end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Create a file e_ticket.rb in models folder as following&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    # e-ticket
    class ETicket &amp;lt; AbstractController::Base
      include AbstractController::Rendering
      include AbstractController::Helpers
      include AbstractController::Translation
      include AbstractController::AssetPaths
      include Rails.application.routes.url_helpers
      helper ApplicationHelper
      self.view_paths = &quot;app/views&quot;
      attr_reader :html
      def initialize(order)
        @order = order
        @html = render_to_string(partial: &quot;shared/e_ticket&quot;, :layout =&amp;gt; false,
             :disposition =&amp;gt; &#39;inline&#39;)
      end
      def pdf
        kit = PDFKit.new(@html)
        kit.stylesheets &amp;lt;&amp;lt; &quot;#{Rails.root}/app/assets/stylesheets/pdf.css&quot;
        kit.to_pdf
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In above code, we have added style sheet “pdf.css” in which we have to write the pdf related css rules. Keep this file as separate for pdf only .
Now you have your e-ticket ready to download and attach to any mail. You have to just create e-ticket by&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    eticket = ETicket.new(order)
    pdf = eticket.pdf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Yehhhhhh……………..its ready to download and attach.&lt;/p&gt;

&lt;p&gt;Now I am writing brief for downloading and attaching the pdf to mail.&lt;/p&gt;

&lt;h3 id=&quot;how-to-download-eticket-pdf&quot;&gt;How to download eticket pdf.&lt;/h3&gt;
&lt;p&gt;In your orders controller you can create an separate action for downloading or you can do this in your orders show action in pdf response. Any way I am creating separate action for downloading order’s e-ticket pdf.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrdersController &amp;lt; ApplicationController
      def download
        @order = Order.find(params[:id])
        eticket = ETicket.new(@order)
        send_data(eticket.pdf, :filename =&amp;gt; &quot;e-Ticket #{@order.number}&quot;,
           :type =&amp;gt; &#39;application/pdf&#39;)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;sending-e-ticket-as-attachment-in-mail&quot;&gt;Sending e-ticket as attachment in mail&lt;/h3&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrderMailer &amp;lt; ActionMailer::Base
      def send_e_ticket(order)
        @order = order
        subject = &quot; E-Ticket&quot;
        eticket = ETicket.new(@order)
        attachments[&quot;E-Ticket #{@order.number}.pdf&quot;] = eticket.pdf
        mail(:to =&amp;gt;”abc@gmail.com”, :subject =&amp;gt;”E-ticket”)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now send an mail using following code&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    OrderMailer.send_e_ticket(order).deliver
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;yippeeeeee…..Mail sent with attached e-ticket pdf.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h1&gt;
</content>
 </entry>
 

</feed>
