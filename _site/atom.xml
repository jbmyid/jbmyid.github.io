<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>jbmyid</title>
 <link href="http://jbmyid.in/atom.xml" rel="self"/>
 <link href="http://jbmyid.in/"/>
 <updated>2014-04-04T18:13:18+05:30</updated>
 <id>http://jbmyid.in</id>
 <author>
   <name>Jalendra Bhanarkar</name>
   <email></email>
 </author>

 
 <entry>
   <title>Generate PDF(e-ticket) from html in Rails</title>
   <link href="http://jbmyid.in/blog/html-to-pdf"/>
   <updated>2014-04-04T00:00:00+05:30</updated>
   <id>http://jbmyid.in/blog/html-to-pdf</id>
   <content type="html">&lt;h1 id=&quot;pdfe-ticket-from-html-in-rails&quot;&gt;PDF(e-ticket) from html in Rails&lt;/h1&gt;

&lt;p&gt;Following are the steps for creating pdf from html views.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “pdfkit” in gemfile&lt;/li&gt;
  &lt;li&gt;Download following 2 files
    &lt;ul&gt;
      &lt;li&gt;wkhtmltopdf-amd64 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-amd64.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;wkhtmltopdf-i386 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-i386.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create “bin” folder in your rails application folder and extract above files in this “bin” folder. These are the binaries which are needed for creating  pdf from html views.&lt;/li&gt;
  &lt;li&gt;Create “pdfkit.rb” in “config/initializers” folder of the application. And add following code&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  #pdfkit.rb
  PDFKit.configure do |config|
    if [&quot;development&quot;].include?(Rails.env)
      #only if your are working on 32bit machine
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-i386&#39;).to_s
    else
      #if your site is hosted on heroku or any other hosting server which is 64bit
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-amd64&#39;).to_s
    end
    config.default_options = {
      :encoding=&amp;gt;&quot;UTF-8&quot;,
      :page_size=&amp;gt;&quot;A4&quot;,
      :margin_top=&amp;gt;&quot;0.25in&quot;,
      :margin_right=&amp;gt;&quot;0.1in&quot;,
      :margin_bottom=&amp;gt;&quot;0.25in&quot;,
      :margin_left=&amp;gt;&quot;0.1in&quot;,
      :disable_smart_shrinking=&amp;gt; false
    }
  end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Create a file e_ticket.rb in models folder as following&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    # e-ticket
    class ETicket &amp;lt; AbstractController::Base
      include AbstractController::Rendering
      include AbstractController::Helpers
      include AbstractController::Translation
      include AbstractController::AssetPaths
      include Rails.application.routes.url_helpers
      helper ApplicationHelper
      self.view_paths = &quot;app/views&quot;
      attr_reader :html
      def initialize(order)
        @order = order
        @html = render_to_string(partial: &quot;shared/e_ticket&quot;, :layout =&amp;gt; false,
             :disposition =&amp;gt; &#39;inline&#39;)
      end
      def pdf
        kit = PDFKit.new(@html)
        kit.stylesheets &amp;lt;&amp;lt; &quot;#{Rails.root}/app/assets/stylesheets/pdf.css&quot;
        kit.to_pdf
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In above code, we have added style sheet “pdf.css” in which we have to write the pdf related css rules. Keep this file as separate for pdf only .
Now you have your e-ticket ready to download and attach to any mail. You have to just create e-ticket by&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    eticket = ETicket.new(order)
    pdf = eticket.pdf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Yehhhhhh……………..its ready to download and attach.&lt;/p&gt;

&lt;p&gt;Now I am writing brief for downloading and attaching the pdf to mail.&lt;/p&gt;

&lt;h3 id=&quot;how-to-download-eticket-pdf&quot;&gt;How to download eticket pdf.&lt;/h3&gt;
&lt;p&gt;In your orders controller you can create an separate action for downloading or you can do this in your orders show action in pdf response. Any way I am creating separate action for downloading order’s e-ticket pdf.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrdersController &amp;lt; ApplicationController
      def download
        @order = Order.find(params[:id])
        eticket = ETicket.new(@order)
        send_data(eticket.pdf, :filename =&amp;gt; &quot;e-Ticket #{@order.number}&quot;,
           :type =&amp;gt; &#39;application/pdf&#39;)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;###Sending e-ticket as attachment in mail&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrderMailer &amp;lt; ActionMailer::Base
      def send_e_ticket(order)
        @order = order
        subject = &quot; E-Ticket&quot;
        eticket = ETicket.new(@order)
        attachments[&quot;E-Ticket #{@order.number}.pdf&quot;] = eticket.pdf
        mail(:to =&amp;gt;”abc@gmail.com”, :subject =&amp;gt;”E-ticket”)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now send an mail using following code&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    OrderMailer.send_e_ticket(order).deliver
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;yippeeeeee…..Mail sent with attached e-ticket pdf.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Hello, Cosette</title>
   <link href="http://jbmyid.in/blog/hello-cosette"/>
   <updated>2014-02-27T00:00:00+05:30</updated>
   <id>http://jbmyid.in/blog/hello-cosette</id>
   <content type="html">#Thinny 2.1, codename &quot;[Cosette](http://lesmiserables.wikia.com/wiki/Cosette)&quot;

Cosette is the main character of the french novel _Les Misérables_, published in 1862 by _Victor Hugo_.

&lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-02-27-hello-cosette/cosette.jpg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-02-27-hello-cosette/cosette.jpg&quot; alt=&quot;Amanda Seyfried as Cosette on the 2012 movie.&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;Amanda Seyfried as Cosette on the 2012 movie.&lt;/blockquote&gt;&lt;/div&gt;


This new version of Thinny comes with mobile support and some bugfixes.

## Usage

### Main variables

The global variables are set on the `_config.yml`[^1] file.

To start, you need to change at least the variable `url` on the file.

#### Social links

To add a social link you just need to add the following code inside the variable `social`:

~~~
  - icon:	[the genericon name for the social network]
    url:	[the url to follow]
    desc:	[a small description for the link (e.g. &quot;Follow me on twitter&quot;)]
~~~

#### Menu

To add a menu item you just need to add the following code inside the variable `menu`:

~~~
  - title:	[title of the menu item]
    url:	[the url to follow]
~~~

#### Others

You&#39;ll find a lot of other variables inside the file, e.g.:

- the site `title`, `description`, `icon` and default `cover` image.
- text of the `copyright` message.
- the number of posts per page (`paginate`).
- the `permalink`&#39;s structure (see [the docs](http://jekyllrb.com/docs/pagination/)).


### Default YAML tags

- `layout:`&lt;i&gt;`post, page`&lt;/i&gt; `or `&lt;i&gt;`fullscreen`&lt;/i&gt;: defines the layout of the page.
- `title: [string]`: title of the post.
- `quote: [string]`: a small description of the post to be shown above the title.
- `dark:`&lt;i&gt;`true`&lt;/i&gt; `or `&lt;i&gt;`false`&lt;/i&gt;: use black font (instead of white) for the header (default value is false).
- `image: [url] or `&lt;i&gt;`false`&lt;/i&gt;: a cover image for the post (default value is _false_).
- `video:`&lt;i&gt;`true`&lt;/i&gt; `or `&lt;i&gt;`false`&lt;/i&gt;: add a cover video for the post (default value is _false_).
- `video_mp4: [url]`: the URL for the mp4 video.
- `video_webm: [url]`: the URL for the webm video.
- `video_ogv: [url]`: the URL for the ogv video.

## Versions

Here is a table with all Thinny&#39;s versions:

|----
| Version | Codename | Platform | Release date
|:-:|:-:|:-:|:-:
| [0.3](https://github.com/camporez/Thinny/releases/tag/v0.3-alexandra) | [Alexandra](http://nikita2010.wikia.com/wiki/Alexandra_Udinov) | Ghost 0.3.x |November 2013
| [2.0](https://github.com/camporez/Thinny/releases/tag/v2.0-bianca) | [Bianca](http://memoriaglobo.globo.com/programas/entretenimento/novelas/caras-bocas/caras-bocas-bianca-isabelle-drummond.htm) | Jekyll | January 2014 |
| [2.1](https://github.com/camporez/Thinny/releases/tag/v2.1-cosette) | [Cosette](http://lesmiserables.wikia.com/wiki/Cosette) | Jekyll | February 2014
| 2.2 | [Dolores](http://en.wikipedia.org/wiki/Dolores_Haze) | Jekyll | _Soon..._[^2]
|----

## Download

&gt; Thinny 2.1 is already [available for download on GitHub](https://github.com/camporez/Thinny/releases).

-----
Want to see something else added or report a bug? [Open an issue](https://github.com/camporez/camporez.github.io/issues/new).

[^1]: This file is placed in your root directory. It&#39;s the main file of configuration. For more information, read [the docs](http://jekyllrb.com/docs/configuration/).
[^2]: See the [issues list](https://github.com/camporez/camporez.github.io/issues?milestone=3).
</content>
 </entry>
 

</feed>
