<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>jbmyid</title>
 <link href="http://www.jbmyid.in/atom.xml" rel="self"/>
 <link href="http://www.jbmyid.in/"/>
 <updated>2014-04-20T06:16:15-07:00</updated>
 <id>http://www.jbmyid.in</id>
 <author>
   <name>Jalendra Bhanarkar</name>
   <email></email>
 </author>

 
 <entry>
   <title>Setup Twitter Bootstrap on Rails</title>
   <link href="http://www.jbmyid.in/blog/bootstrap-on-rails"/>
   <updated>2014-04-15T00:00:00-07:00</updated>
   <id>http://www.jbmyid.in/blog/bootstrap-on-rails</id>
   <content type="html">&lt;h1 id=&quot;setup-twitter-bootstrap-on-rails&quot;&gt;“Setup Twitter Bootstrap on Rails”&lt;/h1&gt;
&lt;p&gt;Twitter Bootstrap is the most popular front-end framework for developing responsive, mobile first projects on the web. This is the most basic thing needed in rails app if no UI yet finaled yet or to design your responsive web layout.
&lt;br /&gt;
To integrate twitter bootstrap in your rails project you can do any of the following method.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using gem ‘twitter-bootstrap-rails’ from &lt;a href=&quot;https://github.com/seyhunak/twitter-bootstrap-rails/tree/bootstrap3&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Or below steps to integrate without gem&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;here-are-the-steps-which-will-be-needed-to-integrate-twitter-bootstrap-in-rails-app&quot;&gt;Here are the steps which will be needed to integrate twitter bootstrap in rails app.&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;Download bootstap from &lt;a href=&quot;http://getbootstrap.com/getting-started/#download&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extract the zip file and copy assets folder content to &lt;code&gt;yourApp/vendor/assets/&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Now you will have following folder in &lt;code&gt;vendor/assets/&lt;/code&gt; directory
    &lt;ul&gt;
      &lt;li&gt;fonts&lt;/li&gt;
      &lt;li&gt;stylesheets&lt;/li&gt;
      &lt;li&gt;javascripts&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create &lt;code&gt;bootstrap_overrides.css.scss&lt;/code&gt; in &lt;code&gt;yourApp/app/assets/stylesheets/&lt;/code&gt; directory and add following line at the top.
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;@import &quot;bootstrap&quot;;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rename your &lt;code&gt;application.css&lt;/code&gt; file to &lt;code&gt;application.css.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;*= require bootstrap_overrides&lt;/code&gt; to your &lt;code&gt;application.css.scss&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add following code to your &lt;code&gt;bootstrap_overrides.css.scss&lt;/code&gt; file
  *
    &lt;pre&gt;
   &lt;code class=&quot;ruby&quot;&gt;
     @font-face {
       font-family: &#39;Glyphicons Halflings&#39;;
       src: url(asset_path(&#39;glyphicons-halflings-regular.eot&#39;));
       src: url(asset_path(&#39;glyphicons-halflings-regular.eot?#iefix&#39;)) format(&#39;embedded-opentype&#39;), url(asset_path(&#39;glyphicons-halflings-regular.woff&#39;)) format(&#39;woff&#39;), url(asset_path(&#39;glyphicons-halflings-regular.ttf&#39;)) format(&#39;truetype&#39;), url(asset_path(&#39;glyphicons-halflings-regular.svg#glyphicons_halflingsregular&#39;)) format(&#39;svg&#39;);
     }
   &lt;/code&gt;
 &lt;/pre&gt;
    &lt;div class=&quot;message&quot;&gt;
   Above code is to fix the glyphicons issue in asset pipelining (in production).
 &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;config.assets.paths &amp;lt;&amp;lt; &quot;#{Rails}/vendor/assets/fonts&quot;&lt;/code&gt; in your &lt;code&gt;application.rb&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;//= require bootstrap.min&lt;/code&gt; in your application.js if you want to include bootstrap js.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;if-even-after-doing-all-above-steps-the-glyphicons-doesnt-work-then&quot;&gt;If even after doing all above steps the glyphicons doesnt work then&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;move the fonts to &lt;code&gt;yourApp/app/assets/fonts/&lt;/code&gt;. And change fonts path in &lt;code&gt;application.rb&lt;/code&gt;
&lt;br /&gt;i.e.  &lt;code&gt;config.assets.paths &amp;lt;&amp;lt; &quot;#{Rails}/assets/fonts&quot;&lt;/code&gt;&lt;/p&gt;

    &lt;div class=&quot;message&quot;&gt;
You are welcome :P
&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Installing Ubuntu 13.10 in dual boot with windows 8.1</title>
   <link href="http://www.jbmyid.in/blog/installing-ubuntu-on-efi-enabled-laptop"/>
   <updated>2014-04-12T00:00:00-07:00</updated>
   <id>http://www.jbmyid.in/blog/installing-ubuntu-on-efi-enabled-laptop</id>
   <content type="html">&lt;h1 id=&quot;installing-ubuntu-1310-in-dual-boot-with-windows-81&quot;&gt;Installing Ubuntu 13.10 in dual boot with windows 8.1&lt;/h1&gt;

&lt;p&gt;Recently I bought Lenovo G510 which have efi feature for boot options. I have struglled a lot to install ubuntu and windows both in dual boot.
After a long strugle I have learned how to install windows 8.1 and ubuntu 13.10 in dual boot.&lt;/p&gt;

&lt;p&gt;Here are steps I followed to work it out.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Before installing windows 8.1 make sure you are installing it in EFI mode.
    &lt;ul&gt;
      &lt;li&gt;Go to boot menu and disable Legacy mode and enable EFI mode only&lt;/li&gt;
      &lt;li&gt;Turn of Secure Boot&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;After enabling EFI install windows 8.1&lt;/li&gt;
  &lt;li&gt;Now create bootable usb of ubuntu 13.10 
    &lt;ul&gt;
      &lt;li&gt;You can use linux startup disk creator to create bootable usb.&lt;/li&gt;
      &lt;li&gt;Or use universal usb installer for windows.&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/Create-a-USB-stick.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/Create-a-USB-stick.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Go to disk manager, and shrink the partition to free up space to install Ubuntu.
    &lt;ul&gt;
      &lt;li&gt;Shrink about 10 - 20 Gb whichever suits you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;From windows TURN OFF fast startup from Power option.&lt;/p&gt;

    &lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/power.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/power.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Now plug ubuntu bootable usb and click on &lt;code&gt;restart&lt;/code&gt; holding &lt;code&gt;SHIFT&lt;/code&gt; button.&lt;/li&gt;
  &lt;li&gt;Now blue screen will appear, look for &lt;code&gt;Use Device&lt;/code&gt; option and select and press &lt;code&gt;enter&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;It will show &lt;code&gt;EFI USB Device&lt;/code&gt;, select and press &lt;code&gt;enter&lt;/code&gt; &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now the Ubuntu boot screen will appear.
    &lt;ul&gt;
      &lt;li&gt;You can now try Ubuntu without installing or install directly.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If you see blank screen after selecting any option follow
    &lt;ul&gt;
      &lt;li&gt;Select any of the option from boot screen but dont press enter&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/boot.png&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/boot.png&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;Press &lt;code&gt;e&lt;/code&gt; and add &lt;code&gt;acpi_osi=Linux acpi_backlight=vendor&lt;/code&gt; in boot options before &lt;code&gt;quiet splash&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Press F10 to boot&lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;Note: This step will be required each time you boot.&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;If you see a message “System is running low graphics” kind of thing from where you can not prceed further.
    &lt;ul&gt;
      &lt;li&gt;Add &lt;code&gt;nomodeset&lt;/code&gt; in boot options before &lt;code&gt;quiet splash&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;And follow 9 th step&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Now moving to installation of ubuntu 
    &lt;ul&gt;
      &lt;li&gt;Install from try ubuntu or Install unbuntu option&lt;/li&gt;
      &lt;li&gt;Select &lt;code&gt;Something Else&lt;/code&gt; option&lt;/li&gt;
      &lt;li&gt;Now when the partition selection screen appear choose free space which was freed from windows of 10/20 GB&lt;/li&gt;
      &lt;li&gt;click &lt;code&gt;+&lt;/code&gt; button and type 2 GB(i.e 2048 MB) and select swap area option from drop down and press create button&lt;/li&gt;
      &lt;li&gt;select free space again and click &lt;code&gt;+&lt;/code&gt; button and select &lt;code&gt;/&lt;/code&gt; (root) from dropdown and press create.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Continue installation&lt;/li&gt;
  &lt;li&gt;Now while booting ubuntu if you encounter blank screen with blinking cursor then enable Legacy Support from boot menu (I had to do it. Without enabling Legacy support i was not able to see ubuntu ui). &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;afer-installation&quot;&gt;Afer installation&lt;/h1&gt;
&lt;p&gt;If you used point 9. or 10. to boot you will need to add it in boot default options. To do so follow these steps.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open terminal &lt;/li&gt;
  &lt;li&gt;Type &lt;code&gt;sudo vi /etc/defaults/grub&lt;/code&gt; and press enter&lt;/li&gt;
  &lt;li&gt;Add &lt;code&gt;acpi_osi=Linux acpi_backlight=vendor&lt;/code&gt; before &lt;code&gt;quiet splash&lt;/code&gt; in &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; option and save the file&lt;/li&gt;
  &lt;li&gt;Type &lt;code&gt;sudo update-grub&lt;/code&gt; in terminal and press enter&lt;/li&gt;
  &lt;li&gt;Now try rebooting you wont need adding these options further while booting.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;Yes we are done&lt;/pre&gt;

&lt;div id=&quot;article-img&quot;&gt;&lt;a href=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/yes.jpeg&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/media/2014-04-12-installing-ubuntu-on-efi-enabled-laptop/yes.jpeg&quot; alt=&quot;&quot; width=&quot;100%&quot; /&gt;&lt;/a&gt;
&lt;blockquote style=&quot;border-left: 10px solid #D5D5D5;&quot;&gt;&lt;/blockquote&gt;&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>Quick Rails Deployment with Capistrano</title>
   <link href="http://www.jbmyid.in/blog/rails-4-capistrano"/>
   <updated>2014-04-04T00:00:00-07:00</updated>
   <id>http://www.jbmyid.in/blog/rails-4-capistrano</id>
   <content type="html">&lt;h1 id=&quot;deploying-rails-4-app-with-capistrano-3&quot;&gt;Deploying Rails 4 App with Capistrano 3&lt;/h1&gt;

&lt;p&gt;Assuming we have a rails app as my_blog
add following in your Gemfile&lt;/p&gt;

&lt;pre&gt;
group :development do
  gem &#39;capistrano&#39;
end
&lt;/pre&gt;
&lt;p&gt;now bundle install&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ bundle install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Capify: make sure there’s no “Capfile” or “capfile” present&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This creates the following files:&lt;/p&gt;
&lt;pre&gt;
├── Capfile
├── config
│   ├── deploy
│   │   ├── production.rb
│   │   └── staging.rb
│   └── deploy.rb
└── lib
    └── capistrano
            └── tasks
&lt;/pre&gt;
&lt;p&gt;Open deploy.rb and set&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
set :application, &#39;application-name&#39;
set :repo_url, &#39;git@github.com:abc/xyz.git&#39; # your git repo
set :deploy_to, &#39;/var/www/my_blog&#39; # where you have to keep your application on server

set :linked_files, %w{config/database.yml config/any_config.yml tmp/restart.txt}
set :linked_dirs, %w{log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}

set :default_env, { path: &quot;/usr/local/bin:$PATH&quot; }

namespace :deploy do

  desc &#39;Restart application&#39;
  task :restart do
    on roles(:app), in: :sequence, wait: 5 do
      # Your restart mechanism here, for example:
      execute :touch, release_path.join(&#39;tmp/restart.txt&#39;)
    end
  end

  after :publishing, :restart

  after :restart, :clear_cache do
    on roles(:web), in: :groups, limit: 3, wait: 10 do
      # Here we can do anything such as:
      # within release_path do
      #   execute :rake, &#39;cache:clear&#39;
      # end
    end
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now setup stage for deploy
eg. staging.rb #in config/deploy/staging.rb&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
role :app, %w{deploy@ip-addressORserver-address}
role :web, %w{deploy@ip-addressORserver-address}

server &#39;ip-addressORserver-address&#39;, user: &#39;deploy&#39;, roles: %w{web app}

set :branch, &#39;staging&#39; # staging branch of git repo(You can set whatever you want)

# in my case i had to set port no for ssh you can omit if you are using default ssh port no.
set :ssh_options, {
    port: 900
 }
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Now you can deploy your app with.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cap staging deploy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Wait.. its not done yet you will have to add some task for each deployment you have to do like migration, asset precompile etc.&lt;/p&gt;

&lt;p&gt;For that we have capistrano-rails
add &lt;code&gt;gem &#39;capistrano-rails&#39;&lt;/code&gt; inside development group of Gemfile
like:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
group :development do
  gem &#39;capistrano&#39;
  gem &#39;capistrano-rails
end
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;add following line in &lt;code&gt;Capfile&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;
require &#39;capistrano/rails&#39;
&lt;/pre&gt;
&lt;p&gt;It will run basic task required while rails application deployment like &lt;code&gt;rake db:migrate&lt;/code&gt; and &lt;code&gt;rake assets:precompile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Yeh you are done with basic setup of deplyment.&lt;/strong&gt;&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Generate PDF(e-ticket) from html in Rails</title>
   <link href="http://www.jbmyid.in/blog/html-to-pdf"/>
   <updated>2014-04-04T00:00:00-07:00</updated>
   <id>http://www.jbmyid.in/blog/html-to-pdf</id>
   <content type="html">&lt;h1 id=&quot;pdfe-ticket-from-html-in-rails&quot;&gt;PDF(e-ticket) from html in Rails&lt;/h1&gt;

&lt;p&gt;Following are the steps for creating pdf from html views.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add gem “pdfkit” in gemfile&lt;/li&gt;
  &lt;li&gt;Download following 2 files
    &lt;ul&gt;
      &lt;li&gt;wkhtmltopdf-amd64 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-amd64.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;wkhtmltopdf-i386 from &lt;a href=&quot;http://code.google.com/p/wkhtmltopdf/downloads/detail?name=wkhtmltopdf-0.9.9-static-i386.tar.bz2&amp;amp;can=2&amp;amp;q=&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Create “bin” folder in your rails application folder and extract above files in this “bin” folder. These are the binaries which are needed for creating  pdf from html views.&lt;/li&gt;
  &lt;li&gt;Create “pdfkit.rb” in “config/initializers” folder of the application. And add following code&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
&lt;code class=&quot;ruby&quot;&gt;
  #pdfkit.rb
  PDFKit.configure do |config|
    if [&quot;development&quot;].include?(Rails.env)
      #only if your are working on 32bit machine
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-i386&#39;).to_s
    else
      #if your site is hosted on heroku or any other hosting server which is 64bit
      config.wkhtmltopdf = Rails.root.join(&#39;bin&#39;, &#39;wkhtmltopdf-amd64&#39;).to_s
    end
    config.default_options = {
      :encoding=&amp;gt;&quot;UTF-8&quot;,
      :page_size=&amp;gt;&quot;A4&quot;,
      :margin_top=&amp;gt;&quot;0.25in&quot;,
      :margin_right=&amp;gt;&quot;0.1in&quot;,
      :margin_bottom=&amp;gt;&quot;0.25in&quot;,
      :margin_left=&amp;gt;&quot;0.1in&quot;,
      :disable_smart_shrinking=&amp;gt; false
    }
  end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;Create a file e_ticket.rb in models folder as following&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    # e-ticket
    class ETicket &amp;lt; AbstractController::Base
      include AbstractController::Rendering
      include AbstractController::Helpers
      include AbstractController::Translation
      include AbstractController::AssetPaths
      include Rails.application.routes.url_helpers
      helper ApplicationHelper
      self.view_paths = &quot;app/views&quot;
      attr_reader :html
      def initialize(order)
        @order = order
        @html = render_to_string(partial: &quot;shared/e_ticket&quot;, :layout =&amp;gt; false,
             :disposition =&amp;gt; &#39;inline&#39;)
      end
      def pdf
        kit = PDFKit.new(@html)
        kit.stylesheets &amp;lt;&amp;lt; &quot;#{Rails.root}/app/assets/stylesheets/pdf.css&quot;
        kit.to_pdf
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;In above code, we have added style sheet “pdf.css” in which we have to write the pdf related css rules. Keep this file as separate for pdf only .
Now you have your e-ticket ready to download and attach to any mail. You have to just create e-ticket by&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    eticket = ETicket.new(order)
    pdf = eticket.pdf
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Yehhhhhh……………..its ready to download and attach.&lt;/p&gt;

&lt;p&gt;Now I am writing brief for downloading and attaching the pdf to mail.&lt;/p&gt;

&lt;h3 id=&quot;how-to-download-eticket-pdf&quot;&gt;How to download eticket pdf.&lt;/h3&gt;
&lt;p&gt;In your orders controller you can create an separate action for downloading or you can do this in your orders show action in pdf response. Any way I am creating separate action for downloading order’s e-ticket pdf.&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrdersController &amp;lt; ApplicationController
      def download
        @order = Order.find(params[:id])
        eticket = ETicket.new(@order)
        send_data(eticket.pdf, :filename =&amp;gt; &quot;e-Ticket #{@order.number}&quot;,
           :type =&amp;gt; &#39;application/pdf&#39;)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;sending-e-ticket-as-attachment-in-mail&quot;&gt;Sending e-ticket as attachment in mail&lt;/h3&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    class OrderMailer &amp;lt; ActionMailer::Base
      def send_e_ticket(order)
        @order = order
        subject = &quot; E-Ticket&quot;
        eticket = ETicket.new(@order)
        attachments[&quot;E-Ticket #{@order.number}.pdf&quot;] = eticket.pdf
        mail(:to =&amp;gt;”abc@gmail.com”, :subject =&amp;gt;”E-ticket”)
      end
    end
  &lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;Now send an mail using following code&lt;/p&gt;
&lt;pre&gt;
  &lt;code class=&quot;ruby&quot;&gt;
    OrderMailer.send_e_ticket(order).deliver
  &lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;yippeeeeee…..Mail sent with attached e-ticket pdf.&lt;/p&gt;

&lt;h1 id=&quot;thank-you&quot;&gt;THANK YOU&lt;/h1&gt;
</content>
 </entry>
 

</feed>
